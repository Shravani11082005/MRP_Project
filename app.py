# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJ6PwCGhOD-2q5mqb3zym5yckpoKh1lm
"""

# movie_revenue_app.py

import streamlit as st
import pandas as pd
import numpy as np
import warnings
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer

warnings.filterwarnings("ignore")

st.set_page_config(page_title="Movie Revenue Predictor")
st.title("🎬 Movie Revenue Predictor")
st.markdown("Upload movie data, select features, and predict revenue using ML models.")

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("boxoffice.csv")
    df.columns = [col.lower().strip() for col in df.columns]
    return df

df = load_data()

# Sidebar info
st.sidebar.header("📋 Column Info")
st.sidebar.write(df.columns.tolist())

# Numeric columns for selection
numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
if 'world_revenue' in numeric_cols:
    numeric_cols.remove('world_revenue')

# Feature selection
st.markdown("<h3 style='color:white;'>🧮 Feature Selection</h3>", unsafe_allow_html=True)
selected_features = st.multiselect("Choose features for prediction:", numeric_cols, default=['budget', 'opening_revenue'])

# Model selection
st.markdown("<h5 style='color:white;'>📌 Select Model</h5>", unsafe_allow_html=True)
model_type = st.radio("", ["Linear Regression", "Random Forest"])

if selected_features:
    df = df.dropna(subset=['world_revenue'])

    X = df[selected_features]
    y = df['world_revenue']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    numeric_transformer = Pipeline([
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())
    ])

    preprocessor = ColumnTransformer([
        ('num', numeric_transformer, selected_features)
    ])

    if model_type == "Linear Regression":
        model = Pipeline([
            ('preprocessor', preprocessor),
            ('regressor', LinearRegression())
        ])
    else:
        model = Pipeline([
            ('preprocessor', preprocessor),
            ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
        ])

    model.fit(X_train, y_train)

    # 🎯 Manual Input for New Prediction
    st.markdown("<h3 style='color:white;'>📝 Predict Revenue for a New Movie</h3>", unsafe_allow_html=True)
    user_input = {}

    for feature in selected_features:
        user_input[feature] = st.number_input(f"Enter {feature}", min_value=0.0, step=1000000.0)

    if st.button("Predict Revenue"):
        input_df = pd.DataFrame([user_input])
        prediction = model.predict(input_df)[0]
        st.success(f"Predicted World Revenue: ${prediction:,.2f}")
else:
    st.warning("Select at least one feature to proceed.")